library(Hmisc)
library(caret)
library(mlbench)
library(ggcorrplot)
library(e1071)
library(scales)
library(caTools)

#### Read network data####################################################
data <- read.csv("./winodws_anaylsis/Train_Test_Windows_10.csv")
## Correlation anaysis and Feature Selection to data #######################
set.seed(7)
dt1 = data[,1:124]
correlationMatrix <- cor_pmat(dt1) # calculate correlation matrix
correlationMatrix[is.na(correlationMatrix)] <- 0
print(correlationMatrix) # summarize the correlation matrix
highlyCorrelated <- findCorrelation(correlationMatrix, cutoff=0.90) # find attributes that are highly corrected that is equal 0.8
print(highlyCorrelated) # print indexes of highly correlated attributes
# plot low correlated features
dt_corr = sapply(dt1[,highlyCorrelated],unclass)
dt_corr_m = cor_pmat(dt_corr)
ggcorrplot(dt_corr_m, hc.order = TRUE, type = "lower", lab = T)
# store correlated features with labels for machine learning classifcation
data_corr= cbind(as.data.frame(dt_corr),data[,ncol(data)-1])
names(data_corr)[ncol(data_corr)] <- "label"
#############################################################################
################### Machine Learning for classifcation ######################

#### Divide data into 70% fro training and 30% for testing
set.seed(3033)
intrain <- createDataPartition(y = data_corr$label, p= 0.7, list = FALSE)

orignal_train <- orignal_dt[intrain,]
orignal_test <- orignal_dt[-intrain,]

filtered_train <- data_corr[intrain,]
filtered_test <- data_corr[-intrain,]

# Statistcs of categorical and numeric data attributes############################
str(data)
summary(data)


summary(filtered_train)
summary(filtered_test)

summary(orignal_train)
summary(orignal_test)
###
